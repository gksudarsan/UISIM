package com.Repayments;

/** @author vsingh  */

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.sun.media.sound.InvalidFormatException;
import com.ui.base.TestBase;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.OverpaymentMaintenance;
import com.ui.pages.ProcessRepayment;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.Highlighter;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;

public class TC_59367 extends TestBase
{
	FutureDatePastDate f;
	QuerySearch q;
	LoginLogoutPage lp;
	OverpaymentMaintenance om;
	ClaimSummary c = new ClaimSummary();
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath,createdDate="", SSN = "123457107";
	TC_59367 ClassObject;
	CreateDirectory CD;
	String amount = "100";
	String query = "SELECT A.SSN FROM T_CLAIMANT A, T_CLAIM B, T_OVERPAYMENT C WHERE A.CLAIMANT_ID = B.CLAIMANT_ID AND "
			+ "B.CLAIM_ID = C.CLAIM_ID AND C.STATUS = 'ACTV' AND C.OVERPAYMENT_ISSUE_ID IS NOT NULL AND C.TF_PENALTY_BALANCE > '1'"
			+ " AND C.ESTABLISHMENT_DATE < CURRENT_DATE AND CLASS = 'FRAD' AND C.INTEREST_BALANCE > '1' AND A.CLAIMANT_ID NOT IN "
			+ "(SELECT D.CLAIMANT_ID FROM T_CLAIMANT_REPAYMENT D WHERE A.CLAIMANT_ID = D.CLAIMANT_ID) ORDER BY "
			+ "C.ESTABLISHMENT_DATE DESC";


	//Properties prop;
	public TC_59367()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, ParseException
	{
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		//SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		ClassObject =new TC_59367();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));


	}

	@Test( description = "CT 28858 REPAY Cancel Repayment - Cancel CC repay applied to interest")
	public void Testing_TC_59355() throws InterruptedException, ClassNotFoundException, SQLException, InvalidFormatException
	{

		//Logging in to application...
		lp=new LoginLogoutPage();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		Thread.sleep(1000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		Highlighter h = new Highlighter();
		q = new QuerySearch();
		String penaltyBalance = q.getPenaltyBalance("SELECT TF_PENALTY_BALANCE FROM T_OVERPAYMENT WHERE CLAIM_ID IN (SELECT "
				+ "CLAIM_ID FROM T_CLAIM WHERE CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"')) ORDER "
				+ "BY UPDATED_TS DESC");
		String overpaymentBalance = q.getOverpaymentBalance("SELECT OVERPAYMENT_BALANCE FROM T_OVERPAYMENT WHERE CLAIM_ID IN (SELECT "
				+ "CLAIM_ID FROM T_CLAIM WHERE CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"')) ORDER "
				+ "BY UPDATED_TS DESC");
		String interestBalance = q.getInterestBalance("SELECT INTEREST_BALANCE FROM T_OVERPAYMENT WHERE CLAIM_ID IN (SELECT "
				+ "CLAIM_ID FROM T_CLAIM WHERE CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"')) ORDER "
				+ "BY UPDATED_TS DESC");




		String amount = String.valueOf(Double.parseDouble(penaltyBalance) + Double.parseDouble(overpaymentBalance) + Double.parseDouble(interestBalance));

		//Enter Repayment Details process...

		wcl.clickHome();
		om = new OverpaymentMaintenance();
		om.enterRepaymentDetails_Creditcard(driver, snapshotPath, SimpleClassname, "Credit Card", "", amount, "", SSN);
		wcl.clickHome();
		Thread.sleep(2000);

		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Comment");
		Thread.sleep(1000);
		driver.findElement(By.xpath("//a[text()='Overpayments']")).click();
		Thread.sleep(2000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		String intpayamt11 =	driver.findElement(By.xpath("//div[text()='Interest']//following::span[2]")).getText();
		System.out.println("interest amount = "+intpayamt11);
		h.highlight(driver, "//div[text()='Interest']//following::span[2]");Thread.sleep(2000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		h.highlight(driver, "//a[text()='Repayment Details']");  
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		Thread.sleep(2000);
		String status = driver.findElement(By.xpath("//td[text()='Status']//following::td[5]")).getText();

		System.out.println("status = "+status);

		if(status.equalsIgnoreCase("Processed"))
		{
			System.out.println("creditcard repayment processed.");
		}

		else
		{
			System.out.println("Batch need to check-- BatchApplyRepayment ");
			Thread.sleep(15000);

		}
		driver.findElement(By.xpath("//td[text()='Repayment ID']//following::a[1]")).click();

		String interest = driver.findElement(By.xpath("//td[text()='Interest']//following::span[7]")).getText();

		System.out.println("interest amount = "+interest);
		h.highlight(driver, "//td[text()='Interest']");  
		h.highlight(driver, "//td[text()='Interest']//following::span[7]");  

		wcl.clickHome();Thread.sleep(2000);
		ProcessRepayment.cancel_repayment(driver, snapshotPath, SimpleClassname, SSN);



		// Run batch for repayment cancellaton------------------------------
		
		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob BatchCancelRepayment benefits_daily_515pm");
		Thread.sleep(15000);

		wcl.clickHome();Thread.sleep(2000);
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Comment");
		Thread.sleep(1000);
		driver.findElement(By.xpath("//a[text()='Overpayments']")).click();
		Thread.sleep(2000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
	    String intpayamt =	driver.findElement(By.xpath("//div[text()='Interest']//following::span[2]")).getText();
		System.out.println("interest paid amount = "+intpayamt);
		h.highlight(driver, "//div[text()='Interest']"); Thread.sleep(1000);
		h.highlight(driver, "//div[text()='Interest']//following::span[2]");  Thread.sleep(1000);
		h.highlight(driver, "//td[text()='Status']//following::td[5]");   Thread.sleep(1000);
		
		Thread.sleep(2000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		String status1 = driver.findElement(By.xpath("//td[text()='Status']//following::td[5]")).getText();

		Assert.assertEquals(status1,"Cancelled" );

		System.out.println("Repayment status is = " +status1);
		Double intpayamt1 = Double.parseDouble(intpayamt);
		Thread.sleep(2000);
		driver.findElement(By.xpath("//td[text()='Repayment ID']//following::a[1]")).click();
		Thread.sleep(4000);
		h.highlight(driver, "//td[text()='Cancelled']");  
		
		Assert.assertEquals(intpayamt1, 0.00, 0);
		
		
			System.out.println("Paid interest reverted into balance interest i.e. paid interest is  = " +intpayamt1);
			

		
		
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{

		driver.close();
		driver.quit();
	}
}