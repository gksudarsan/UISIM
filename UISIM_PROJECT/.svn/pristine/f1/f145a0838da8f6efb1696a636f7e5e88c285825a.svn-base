package com.Payments;

import static org.testng.Assert.assertTrue;

/** @author mjape */

/** Weekly Certification & Payment Batch pending */

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.ResolveWorkItem;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.screenShot;

public class TC_56813 extends TestBase
{
	String lumpsumpaid = "100000", claimantcontri = "500";

	FutureDatePastDate f = new FutureDatePastDate();
	QuerySearch q;
	LoginLogoutPage lp;
	UpdateIssueDates uid;
	WeeklyCert wc;
	ClaimSummary cs;
	ResolveWorkItem rwi;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "776856575", ed, p;
	int CWE = -7;
	double pen, temp;
	TC_56813 ClassObject;
	CreateDirectory CD;
	String query = "select a.ssn from t_claimant a, t_claim c where c.status = 'ACTV' "
			+ "and c.entitlement_type = 'REG' and a.claimant_id = c.claimant_id and "
			+ "a.claimant_id not in (select b.claimant_id from t_weekly_certification b where a.claimant_id = b.claimant_id) "
			+ "and c.effective_date = '";

	//Properties prop;
	public TC_56813()
	{
		super();
	}

	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException
	{
		//Searching for the SSN in the database...
		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		ClassObject =new TC_56813();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);

		//Opening browser... Hitting URL...
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));
	}

	@Test(priority=1, description = "Payment: Processing reason Weekly Certification: Payment amount is always rounded "
			+ "to next lowest dollar")
	public void Testing56813() throws InterruptedException, ClassNotFoundException, SQLException, ParseException
	{
		//Logging in to application...
		lp=new LoginLogoutPage();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		Thread.sleep(1000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);

		//Update Future Issue Dates...
		uid= new UpdateIssueDates();
		uid.updateFutureIssueStartDate(driver, snapshotPath, SimpleClassname, SSN, CWE);

		//File Weekly Certification...
		wc = new WeeklyCert();
		wc.fileWeeklyCertificationPension(driver, snapshotPath, SimpleClassname, SSN, CWE, lumpsumpaid, claimantcontri);

		//Issue Investigation...
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		rwi = new ResolveWorkItem();
		rwi.resolveInvestigationPensionOther(driver, snapshotPath, SimpleClassname, SSN, lumpsumpaid, claimantcontri);

		//Issue Adjudication...
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		rwi = new ResolveWorkItem();
		rwi.resolveAdjudicationPensionOther(driver, snapshotPath, SimpleClassname, SSN, "Allow", "Pension reductions");

		//Run Payments Batch...
		String ID = "";
		q = new QuerySearch();
		do
		{
			System.out.println("Waiting for Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment to run...");
			Thread.sleep(1000*60);
			try
			{
				ID = q.getClaimantPaymentID("SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE "
						+ "CREATED_BY = 'Pay050ProvidePayment' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN (SELECT "
						+ "CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC");
				System.out.println("CLAIMANT_PAYMENT_ID : "+ID);
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}
		}
		while(ID.isEmpty());
		System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
		Thread.sleep(1000);
		System.out.println("	");

		//Check Claim Summary...
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		cs = new ClaimSummary();
		cs.claimsummary(SSN, snapshotPath, SimpleClassname, "Pension");

		p = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//td[contains(text(), 'Pension')]//following::span[1]"))).getText();
		p = p.substring(3);
		pen = Double.parseDouble(p);
		temp = 1.0 - (pen - Math.floor(pen));
		pen = pen + temp;
		System.out.println("Pension calculated : "+pen);

		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(text(), 'Processed Weekly Certifications')]"))).click(); Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		String cweDate = f.Saturday(CWE).substring(0, 2) + "/" + f.Saturday(CWE).substring(2, 4) + "/" + f.Saturday(CWE).substring(4);
		System.out.println(cweDate);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(text(), '"+cweDate+"')]//following::a[1]"))).click(); Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);	

		p = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//td[contains(text(), 'Pension')]//following::td[2]"))).getText();
		p = p.substring(2);
		System.out.println("Pension deducted : "+p);
		assertTrue(p.equalsIgnoreCase((Double.toString(pen))+"0"), "Payment amount is not rounded to next lowest dollar...");
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickLogout();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		driver.close();
		driver.quit();
	}
}