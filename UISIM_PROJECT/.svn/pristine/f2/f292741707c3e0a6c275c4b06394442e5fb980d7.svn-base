/* @author vsingh  */

package com.Payments;

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;

import com.ui.locators.Wc_locators;

import com.ui.pages.Add_dependent;
import com.ui.pages.ClaimSummary;
import com.ui.pages.CreateIssue;
import com.ui.pages.FileWeeklyCertification;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.Reassign_WorkItem;
import com.ui.pages.ResolveWorkItem;

import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.Highlighter;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;



public class TC_59019 extends TestBase
{


	FutureDatePastDate f = new FutureDatePastDate();
	QuerySearch q;
	LoginLogoutPage lp;
	CreateIssue ci;
	ResolveWorkItem rwi;
	ClaimSummary cs;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "151267734", ed;
	int a=0,  CWE = -7;
	TC_59019 ClassObject;
	CreateDirectory CD;
	String selection="Approve/Disapprove Dependents";

	String query = "select a.ssn from t_claimant a, t_claim c where c.status = 'ACTV' "
			+ "and c.entitlement_type = 'REG' and a.claimant_id = c.claimant_id and "
			+ "a.claimant_id not in (select b.claimant_id from t_weekly_certification b where a.claimant_id = b.claimant_id "
			+ "and certification_date > '";


	//Properties prop;
	public TC_59019()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, InterruptedException
	{
		//Searching for the SSN in the database...

		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + ed + "') and c.effective_date = '" + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		//SSN = q.queryresult(query);		
		System.out.println("SSN to be use : "+SSN);


		ClassObject =new TC_59019();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);

		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));

		driver.get(prop.getProperty("applicationUrl"));
		lp=new LoginLogoutPage();
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		System.out.println("login logout completed");




	}
	@Test(description ="TC_59019" )
	public void TC_59018() throws InterruptedException, ParseException
	{
		System.out.println("@test initiated");
		wcl=new Wc_locators();
		// String SSN_par= SSN.substring(5, 9);

		Thread.sleep(1000);
		Add_dependent.dependent_add (driver,snapshotPath,SimpleClassname,SSN,CWE);
	    Thread.sleep(3000);
		wcl.clickHome();Thread.sleep(2000);

		FileWeeklyCertification.SubmitWeeklyCertification(driver, snapshotPath, SimpleClassname, SSN);

		FileWeeklyCertification.WCF_DeatilsForNonPartialEmpolyment(driver, snapshotPath, SimpleClassname ,SSN);
		System.out.println("wc filed successfully");

		System.out.println("Waiting to run batch............ ");

		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob Pay010DetermineWeeklyCertType benefits_daily_515pm;"
				+ "./qclient.sh runJob Pay040ProcessedWeeklyCert benefits_daily_515pm;./qclient.sh runJob Pay050ProvidePayment benefits_daily_515pm");
		Thread.sleep(10000);

		String ID = "";
		for	(int i=0;i<10;i++)
		{
			if (ID.isEmpty())
			{
			q = new QuerySearch();
			System.out.println("i= "+i+" Waiting for Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment to run...");
			Thread.sleep(1000*30);
			try
			{
				ID = q.getClaimantPaymentID("SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE "
						+ "CREATED_BY = 'Pay050ProvidePayment' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN (SELECT "
						+ "CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC");
				System.out.println("CLAIMANT_PAYMENT_ID : "+ID);
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}

			

			}

			else {
				System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
			}
		}
		System.out.println("exit from loop..................");
		Assert.assertFalse(ID.isEmpty(), "Payment ID is null......");

		wcl.clickHome();

		cs = new ClaimSummary();

		cs.claimsummary(SSN,snapshotPath, SimpleClassname, "Dependency");




	}
	@AfterTest
	public void close_browser()
	{
		driver.close();
		driver.quit();
		System.out.println("Testcase executed and browser closed");
	}

}
