/** @author vsingh  */
package com.Overpayments;

import static org.testng.Assert.assertEquals;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.Overpayment;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.Highlighter;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;

public class TC_55816 extends TestBase
{
	int CWE = -42;
	int numberOfWeeks = 1;

	FutureDatePastDate f;
	QuerySearch q;
	LoginLogoutPage lp;
	UpdateIssueDates uid;
	WeeklyCert w;
	ClaimSummary c;
	 Highlighter h;
	Overpayment o;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "123457113", ed; 
	TC_55816 ClassObject;
	CreateDirectory CD;

	String query = "SELECT A.SSN FROM T_CLAIMANT A, T_CLAIM B WHERE A.CLAIMANT_ID = B.CLAIMANT_ID  AND B.ENTITLEMENT_TYPE = 'REG'  "
			+ "AND B.STATUS = 'ACTV' AND B.BYE_DATE > CURRENT_DATE AND (B.CLAIM_ID NOT IN (SELECT D.CLAIM_ID FROM T_ISSUE D "
			+ "WHERE B.CLAIM_ID = D.CLAIM_ID) OR B.CLAIM_ID IN (SELECT D.CLAIM_ID FROM T_ISSUE D WHERE B.CLAIM_ID = D.CLAIM_ID "
			+ "AND D.ISSUE_STATUS = 'DECD')) AND A.CLAIMANT_ID NOT IN (SELECT C.CLAIMANT_ID FROM T_WEEKLY_CERTIFICATION C "
			+ "WHERE A.CLAIMANT_ID = C.CLAIMANT_ID AND C.CERTIFICATION_DATE > '";

	//Properties prop;
	public TC_55816()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, ParseException, InterruptedException
	{
		//Searching for the SSN in the database...
		f = new FutureDatePastDate();
		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + ed + "') AND B.EFFECTIVE_DATE = '" + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		//SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		ClassObject =new TC_55816();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));
		lp=new LoginLogoutPage();
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		System.out.println("login logout completed");
		
		
	}

	@Test( description ="TC_55816_OVERPAYMENT")
	public void TC_55816_op() throws InterruptedException, ClassNotFoundException, SQLException
	{
		w = new WeeklyCert();
		c = new ClaimSummary();

		//Fillig wcBy SSN/CWE ..............................
		wcl.clickHome();
		Thread.sleep(5000);
		
		w.WeeklyCertBySSN_CWE(driver, snapshotPath, SimpleClassname, SSN, CWE);

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Pending Weekly Certification(s)");

		//Run Payment Batch...
		
		System.out.println("Waiting for Payment batches to run...");
		
		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob Pay010DetermineWeeklyCertType benefits_daily_515pm;"
				+ "./qclient.sh runJob Pay040ProcessedWeeklyCert benefits_daily_515pm;./qclient.sh runJob Pay050ProvidePayment benefits_daily_515pm");
		Thread.sleep(10000);

		String ID = "";
		for	(int i=0;i<10;i++)
		{

			q = new QuerySearch();
			System.out.println("i= "+i+" Waiting for Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment to run...");
			Thread.sleep(1000*30);
			try
			{
				ID = q.getClaimantPaymentID("SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE "
						+ "CREATED_BY = 'Pay050ProvidePayment' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN (SELECT "
						+ "CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC");
				System.out.println("CLAIMANT_PAYMENT_ID : "+ID);
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}

			if (ID.isEmpty())

				System.out.println("waiting for payment to be updated");

			else {
				System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
			}
		}
		System.out.println("exit from loop..................");
		Assert.assertFalse(ID.isEmpty(), "Payment ID is null......");

		

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");

		//Creating Overpayment Issue...
		
		
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		
		o.createOverpaymentIssue(driver, snapshotPath, SimpleClassname, SSN, "Quality Control", CWE, 2, numberOfWeeks);

		//Investigating Overpayment Iusse...
		wcl.clickHome();
		Thread.sleep(5000);
		
		o.InvestigationOverpaymentIssueQualityControl(driver, snapshotPath, SimpleClassname, SSN, CWE, "Quality Control", "Fraud");

		//Run Predetermination Notice Batch...
		System.out.println(" Predetermination Notice batch  run...");
		
		
		//Provide Claimant's Responce...
		wcl.clickHome();
		Thread.sleep(5000);
		
		o.preDeterminationLetterResponse(driver, snapshotPath, SimpleClassname, SSN, "Quality Control", "Fraud");

		//Run Overpayment Batches...
		System.out.println(" Overpayment batches  run...");
		//Thread.sleep(60000*5);
		
		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");
		
		Thread.sleep(1000);
		driver.findElement(By.xpath("//a[text()='Overpayments']")).click();
		Thread.sleep(2000);
		
		Highlighter h = new Highlighter();
		h.highlight(driver, "//td[ contains (text(), 'Quality Control Pre-determination Letter Generated.')]");
		
		
		h.highlight(driver, "//td[ contains (text(), 'Overpayment Id')]");
		
		driver.findElement(By.xpath("//span[@class='ui-radiobutton-icon ui-icon ui-icon-blank ui-c']")).click();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		
		
		wcl.clickNext().click(); Thread.sleep(3000); 
		h.highlight(driver, "//td[ contains (text(), 'Total Overpayment')]");
		
		String Fraud_indicator = driver.findElement(By.xpath("//input[@name='j_id_8z:0:earningsBean_-fraudIndicated']//..")).getText();
		System.out.println("fraud incicator =" +Fraud_indicator);
		
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		Assert.assertEquals(Fraud_indicator,"Yes");
		
		System.out.println("Testcase executed and passed.");
		
		
		
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{
		
		driver.close();
		driver.quit();
	}
}