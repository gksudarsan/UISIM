 package com.Overpayments;

/** @author mjape 

Payment batches pending */

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.Overpayment;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;

public class TC_55810 extends TestBase
{
	FutureDatePastDate f;
	QuerySearch q;
	LoginLogoutPage lp;
	UpdateIssueDates uid;
	WeeklyCert w;
	ClaimSummary c;
	Overpayment o;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "", ed;
	TC_55810 ClassObject;
	CreateDirectory CD;
	int CWE = 0;

	String query = "SELECT UNIQUE(A.SSN) FROM T_CLAIMANT A, T_WEEKLY_CERTIFICATION B, T_CLAIMANT_PAYMENT C , T_CLAIM E, "
			+ "T_CLAIM_APPLICATION_EMPLOYER F WHERE A.CLAIMANT_ID = B.CLAIMANT_ID  AND B.CLAIMANT_ID = C.CLAIMANT_ID AND "
			+ "A.CLAIMANT_ID = E.CLAIMANT_ID AND E.CLAIM_APPLICATION_ID = F.CLAIM_APPLICATION_ID AND E.STATUS = 'ACTV' AND "
			+ "E.ENTITLEMENT_TYPE = 'REG' AND E.BYE_DATE > CURRENT_DATE AND F.EMPLOYER_NAME IS NOT NULL AND C.PAYMENT_DATE IS NOT "
			+ "NULL AND B.CERTIFICATION_DATE > '";

	//Properties prop;
	public TC_55810()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, ParseException
	{
		//Searching for the SSN in the database...
		f = new FutureDatePastDate();
		ed = f.d(-29);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		query = query + ed + "' AND B.CERTIFICATION_DATE < '";
		ed = f.Saturday(-7);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		query = query + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		String lastCWE = q.Data("SELECT CWE FROM T_WEEKLY_CERTIFICATION WHERE CLAIMANT_ID IN (SELECT "
				+ "CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CWE DESC", "CWE");
		System.out.println("Last CWE : "+lastCWE);
		Date date = new Date();
		String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(date);
		System.out.println("Current Date : "+currentDate);
		Date date1 = new SimpleDateFormat("yyyy-MM-dd").parse(lastCWE);
		Date date2 = new SimpleDateFormat("yyyy-MM-dd").parse(currentDate);
		CWE = (int)((date1.getTime() - date2.getTime()) / (1000*60*60*24));
		System.out.println(CWE);

		ClassObject =new TC_55810();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));
	}

	@Test(priority=1, description = "Total Reported Earnings (All Employers),Total Hours Worked (All Employer), Reported Earnings "
			+ "(This Employer),Hours Worked (This Employer),Final Earnings (This Employer), Final Hours Worked (This Employer), "
			+ "Other Type of Payment, Hours,Amount Paid, Use Reported Earnings (This Employer) columns should be added on Overpayment "
			+ "Investigation Employer Response (BPC-018) screen under 'Enter Weekly Details' section.")
	public void Testing55810() throws InterruptedException, ClassNotFoundException, SQLException
	{
		//Logging in to application...
		lp=new LoginLogoutPage();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		Thread.sleep(1000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);

		for(int l = 1 ; l <= 2 ; l++)
		{
			//Weekly Cert By SSN/CWE Process...
			wcl.clickHome();
			Thread.sleep(5000);
			w = new WeeklyCert();
			w.WeeklyCertBySSN_CWE(driver, snapshotPath, SimpleClassname, SSN, CWE+(7*(l-1)));
		}

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Pending Weekly Certification(s)");

		String ID = "";
		//Run Payments Batch...		
		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob Pay010DetermineWeeklyCertType benefits_daily_515pm;"
				+ "./qclient.sh runJob Pay040ProcessedWeeklyCert benefits_daily_515pm;./qclient.sh runJob Pay050ProvidePayment benefits_daily_515pm");
		Thread.sleep(5000);
		do
		{
			System.out.println("Waiting for Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment to run...");
			Thread.sleep(1000*60);
			q = new QuerySearch();
			String query = "SELECT WEEKLY_CERT_PMNT_DEDUCTION_ID FROM T_WEEKLY_CERT_PMNT_DEDUCTION WHERE "
					+ "DATE(CREATED_TS) = CURRENT_DATE AND PROCESSED_WEEKLY_CERT_ID IN (SELECT PROCESSED_WEEKLY_CERT_ID FROM "
					+ "T_PROCESSED_WEEKLY_CERT WHERE WEEKLY_CERTIFICATION_ID IN (SELECT WEEKLY_CERTIFICATION_ID FROM "
					+ "T_WEEKLY_CERTIFICATION WHERE CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"')))";
			try
			{
				ID = q.Data(query, "WEEKLY_CERT_PMNT_DEDUCTION_ID");
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}
		}
		while(ID.isEmpty());
		System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
		Thread.sleep(5000);
		System.out.println("	");
		
		ID = "";
		ssh = new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob BatchCTProcessAndExportClaimantPayments benefits_daily_515pm");
		Thread.sleep(5000);
		do
		{
			System.out.println("Waiting for BatchCTProcessAndExportClaimantPayments to run...");
			Thread.sleep(1000*60);
			q = new QuerySearch();
			String query = "SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE PAYMENT_DATE IS NOT NULL AND "
						+ "UPDATED_BY = 'BatchCTProcessAndExportClaiman' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN "
						+ "(SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC";
			try
			{
				ID = q.Data(query, "CLAIMANT_PAYMENT_ID");
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}
		}
		while(ID.isEmpty());
		System.out.println("BatchCTProcessAndExportClaimantPayments Successful...");
		Thread.sleep(1000);
		System.out.println("	");
		System.out.println("Payment Successful...");

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");

		//Creating Overpayment Issue...
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		o.createOverpaymentIssueForMultipleWeeks(driver, snapshotPath, SimpleClassname, SSN, "Quality Control", CWE, 2, 1);

		//Investigating Overpayment Iusse...
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		o.screenVerificationBPC018(driver, snapshotPath, SimpleClassname, SSN, CWE, "Quality Control", "Fraud");
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickLogout();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		driver.close();
		driver.quit();
	}
}