package com.Payments;

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

import org.checkerframework.checker.index.qual.SubstringIndexFor;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.Payments_Locators;
import com.ui.locators.Wc_locators;

import com.ui.pages.Add_dependent;
import com.ui.pages.ClaimSummary;
import com.ui.pages.CreateIssue;
import com.ui.pages.FileWeeklyCertification;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.ResolveWorkItem;
import com.ui.pages.SearchWorkItem;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.PageHeading;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.screenShot;



public class TC_59019 extends TestBase
{
	

	FutureDatePastDate f = new FutureDatePastDate();
	QuerySearch q;
	LoginLogoutPage lp;
	CreateIssue ci;
	ResolveWorkItem rwi;
	ClaimSummary cs;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "043724997", ed;
	int a=0,  CWE = -14;
	TC_59019 ClassObject;
	CreateDirectory CD;
	String query = "SELECT SSN FROM T_CLAIMANT WHERE CLAIMANT_ID IN (SELECT A.CLAIMANT_ID FROM ("
			+ "SELECT A.CLAIM_ID,A.CLAIMANT_ID,A.WBA,A.MBA FROM "
			+ "(SELECT * FROM DB2PRD1.t_claim where BYE_DATE > current date and effective_date > '2019-05-01' "
			+ "and PROGRAM_TYPE =110 order by UPDATED_TS desc) A INNER JOIN DB2PRD1.T_CLAIMANT_PAYMENT B "
			+ "ON A.CLAIMANT_ID = B.CLAIMANT_ID) A "
			+ "INNER JOIN DB2PRD1.T_CLAIM_EMPLOYMENT C "
			+ "ON A.CLAIM_ID = C.CLAIM_ID and A.CLAIM_ID not in (Select A.CLAIM_ID from T_OVERPAYMENT X where A.CLAIM_ID=X.CLAIM_ID)) "
			+ "AND CLAIMANT_ID NOT IN (select CLAIMANT_ID from T_WEEKLY_CERTIFICATION where certification_date > '";


	//Properties prop;
	public TC_59019()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, InterruptedException
	{
		//Searching for the SSN in the database...
		
		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + ed + "')";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		//SSN = q.queryresult(query);		
		System.out.println("SSN to be use : "+SSN);
		

	ClassObject =new TC_59019();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);

		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));

		driver.get(prop.getProperty("applicationUrl"));
		lp=new LoginLogoutPage();
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		System.out.println("login logout completed");
		
	
	

	}
	@Test(description ="TC_59019" )
	public void TC_59018() throws InterruptedException, ParseException
	{
		System.out.println("@test initiated");
		wcl=new Wc_locators();
		// String SSN_par= SSN.substring(6, 9);
		
	Thread.sleep(3000);
	
	Add_dependent.dependent_add (driver,snapshotPath,SimpleClassname,SSN);
	
   
	FileWeeklyCertification.SubmitWeeklyCertification(driver, snapshotPath, SimpleClassname, SSN);

	FileWeeklyCertification.WCF_DeatilsForNonPartialEmpolyment(driver, snapshotPath, SimpleClassname ,SSN);
	System.out.println("wc filed successfully");
  
	
	cs = new ClaimSummary();
 
	cs.claimsummary(SSN,snapshotPath, SimpleClassname, "Dependency");
	
	
	
	}
	@AfterTest
	public void close_browser()
	{
		driver.close();
		driver.quit();
		System.out.println("Testcase executed and browser closed");
	}
	
}
