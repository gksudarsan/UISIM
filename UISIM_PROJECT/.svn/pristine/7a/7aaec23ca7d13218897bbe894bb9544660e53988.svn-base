package com.Overpayments;

/** @author mjape 

Payment batches pending */

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.sun.media.sound.InvalidFormatException;
import com.ui.base.TestBase;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.Overpayment;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.CreateExcel;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;

public class TC_55824 extends TestBase
{
	int CWE = -21;

	FutureDatePastDate f;
	QuerySearch q;
	LoginLogoutPage lp;
	UpdateIssueDates uid;
	WeeklyCert w;
	ClaimSummary c;
	Overpayment o;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "123457162", ed;
	TC_55824 ClassObject;
	CreateDirectory CD;
	String query = "SELECT A.SSN FROM T_CLAIMANT A, T_CLAIM B WHERE A.CLAIMANT_ID = B.CLAIMANT_ID  AND B.ENTITLEMENT_TYPE = 'REG'  "
			+ "AND B.STATUS = 'ACTV' AND B.BYE_DATE > CURRENT_DATE AND (B.CLAIM_ID NOT IN (SELECT D.CLAIM_ID FROM T_ISSUE D "
			+ "WHERE B.CLAIM_ID = D.CLAIM_ID) OR B.CLAIM_ID IN (SELECT D.CLAIM_ID FROM T_ISSUE D WHERE B.CLAIM_ID = D.CLAIM_ID "
			+ "AND D.ISSUE_STATUS = 'DECD')) AND A.CLAIMANT_ID NOT IN (SELECT C.CLAIMANT_ID FROM T_WEEKLY_CERTIFICATION C "
			+ "WHERE A.CLAIMANT_ID = C.CLAIMANT_ID AND C.CERTIFICATION_DATE > '";

	//Properties prop;
	public TC_55824()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, ParseException
	{
		//Searching for the SSN in the database...
		f = new FutureDatePastDate();
		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + ed + "') AND B.EFFECTIVE_DATE = '" + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		ClassObject =new TC_55824();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));
	}

	@Test(priority=1, description = "To verify that system calculates the potential overpayment amount (Class - Fraud) when CWE "
			+ "is under-reported by the claimant.")
	public void Testing55824() throws InterruptedException, ClassNotFoundException, SQLException, InvalidFormatException
	{
		//Logging in to application...
		lp=new LoginLogoutPage();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		Thread.sleep(1000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);

		//Weekly Cert By SSN/CWE Process...
		for(int e = 0 ; e < 2 ; e++)
		{
			wcl.clickHome();
			Thread.sleep(5000);
			w = new WeeklyCert();
			w.WeeklyCertBySSN_CWE(driver, snapshotPath, SimpleClassname, SSN, (CWE+(7*e)));
		}

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Pending Weekly Certification(s)");

		String ID = "";
		//Run Payments Batch...		
		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob Pay010DetermineWeeklyCertType benefits_daily_515pm;"
				+ "./qclient.sh runJob Pay040ProcessedWeeklyCert benefits_daily_515pm;./qclient.sh runJob Pay050ProvidePayment benefits_daily_515pm");
		Thread.sleep(5000);
		do
		{
			System.out.println("Waiting for Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment to run...");
			Thread.sleep(1000*60);
			q = new QuerySearch();
			String query = "SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE PAYMENT_DATE IS NOT NULL AND "
						+ "UPDATED_BY = 'Pay050ProvidePayment' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN "
						+ "(SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC";
			try
			{
				ID = q.Data(query, "CLAIMANT_PAYMENT_ID");
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}
		}
		while(ID.isEmpty());
		System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
		Thread.sleep(1000);
		System.out.println("	");
		
		ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob BatchCTProcessAndExportClaimantPayments benefits_daily_515pm");
		Thread.sleep(5000);
		do
		{
			System.out.println("Waiting for BatchCTProcessAndExportClaimantPayments to run...");
			Thread.sleep(1000*60);
			q = new QuerySearch();
			String query = "SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE PAYMENT_DATE IS NOT NULL AND "
						+ "UPDATED_BY = 'BatchCTProcessAndExportClaiman' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN "
						+ "(SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC";
			try
			{
				ID = q.Data(query, "CLAIMANT_PAYMENT_ID");
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}
		}
		while(ID.isEmpty());
		System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
		Thread.sleep(1000);
		System.out.println("	");
		System.out.println("Payment Successful...");

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");

		//Creating Overpayment Issue...
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		o.createOverpaymentIssue(driver, snapshotPath, SimpleClassname, SSN, "Back Pay Award", CWE, 1, 2);

		//Investigating Overpayment Iusse...
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		o.InvestigationOverpaymentIssueQualityControl(driver, snapshotPath, SimpleClassname, SSN, CWE, "Back Pay Award", "Fraud");

		//Check for Predetermination Notice in DB...
		checkPredterminationNoticeDB(SSN);

		//Provide Claimant's Responce...
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		o.preDeterminationLetterResponse(driver, snapshotPath, SimpleClassname, SSN, "Back Pay Award", "Fraud");

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Comment");
	}

	private void checkPredterminationNoticeDB(String SSN) throws ClassNotFoundException, SQLException, InvalidFormatException
	{
		QuerySearch qs = new QuerySearch();

		String CorrespondenceID = qs.getCorrespondenceID("SELECT Correspondence_ID FROM T_CORRESPONDENCE WHERE "
				+ "CORRESPONDENCE_CODE =  'OVPPREDEF' AND CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') "
				+ "ORDER BY CREATED_TS DESC");

		String CorrespondenceCode = qs.getCorrespondenceCode("SELECT CORRESPONDENCE_CODE FROM T_CORRESPONDENCE WHERE "
				+ "CORRESPONDENCE_CODE =  'OVPPREDEF' AND CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') "
				+ "ORDER BY CREATED_TS DESC");

		String ClaimantID = qs.getClaimantID("SELECT CLAIMANT_ID FROM T_CORRESPONDENCE WHERE "
				+ "CORRESPONDENCE_CODE =  'OVPPREDEF' AND CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') "
				+ "ORDER BY CREATED_TS DESC");

		String CreatedTS = qs.getCreatedTS("SELECT CREATED_TS FROM T_CORRESPONDENCE WHERE "
				+ "CORRESPONDENCE_CODE =  'OVPPREDEF' AND CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') "
				+ "ORDER BY CREATED_TS DESC");

		String CreatedBy = qs.getCreatedBy("SELECT CREATED_BY FROM T_CORRESPONDENCE WHERE "
				+ "CORRESPONDENCE_CODE =  'OVPPREDEF' AND CLAIMANT_ID IN (SELECT CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') "
				+ "ORDER BY CREATED_TS DESC");

		CreateExcel ce = new CreateExcel();
		ce.create_t_correspondence_table(CorrespondenceID, CorrespondenceCode, ClaimantID, CreatedTS, CreatedBy);
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickLogout();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		driver.close();
		driver.quit();
	}
}