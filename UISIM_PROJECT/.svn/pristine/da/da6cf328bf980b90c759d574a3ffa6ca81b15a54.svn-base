package com.Payments;

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.CreateIssue;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.ResolveWorkItem;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.Highlighter;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.screenShot;

public class TC_58909 extends TestBase
{
	int CWE = -14;

	FutureDatePastDate f;
	QuerySearch q;
	LoginLogoutPage lp;
	Wc_locators wcl = new Wc_locators();
	UpdateIssueDates uid;
	CreateIssue ci;
	ResolveWorkItem rwi;
	WeeklyCert w;
	ClaimSummary c;
	Highlighter h;
	screenShot screen=new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "123457190", ed;
	TC_58909 ClassObject;
	CreateDirectory CD;
	String query = "SELECT A.SSN FROM T_CLAIMANT A, T_CLAIM B WHERE A.CLAIMANT_ID = B.CLAIMANT_ID AND ENTITLEMENT_TYPE = 'REG' "
			+ "AND STATUS = 'ACTV' AND WBA <> '0' AND MBA <> '0' AND A.CLAIMANT_ID NOT IN (SELECT C.CLAIMANT_ID FROM "
			+ "T_WEEKLY_CERTIFICATION C)";

	//Properties prop;
	public TC_58909()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, ParseException
	{
		//Searching for the SSN in the database...
		f = new FutureDatePastDate();
		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + "AND B.EFFECTIVE_DATE = '" + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		ClassObject =new TC_58909();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));
	}

	@Test(priority=1, description = "Process first payment on a claim for which there is a charge-only sep denial.")
	public void Testing58909() throws InterruptedException, ClassNotFoundException, SQLException
	{
		//Logging in to application...
		lp=new LoginLogoutPage();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		Thread.sleep(1000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);

		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");

		//Update Future Issue Dates...
		wcl.clickHome();
		Thread.sleep(5000);
		uid = new UpdateIssueDates();
		uid.updateFutureIssueStartDate(driver, snapshotPath, SimpleClassname, SSN, CWE);

		//Weekly Cert By SSN/CWE Process...
		wcl.clickHome();
		Thread.sleep(5000);
		w = new WeeklyCert();
		w.fileWeeklyCertification58909(driver, snapshotPath, SimpleClassname, SSN, CWE);

		//Issue Investigation...
		wcl.clickHome();
		Thread.sleep(5000);
		rwi = new ResolveWorkItem();
		rwi.resolveInvestigationDischargeAbsenteeism(driver, snapshotPath, SimpleClassname, SSN, CWE);

		//Issue Adjudication...
		wcl.clickHome();
		Thread.sleep(5000);
		rwi = new ResolveWorkItem();
		rwi.resolveAdjudicationDischargeAbsenteeism(driver, snapshotPath, SimpleClassname, SSN, "Absenteeism", "Deny", CWE);

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Pending Weekly Certification(s)");

		//Run Payment Batch...
		System.out.println("Waiting for batch to run...");
		Thread.sleep(60000*5);

		//Check Claim Summary process...
		wcl.clickHome();
		Thread.sleep(5000);
		c = new ClaimSummary();
		c.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");

		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(text(), 'Processed Weekly Certifications')]"))).click(); Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		String cweDate = f.Saturday(CWE).substring(0, 2) + "/" + f.Saturday(CWE).substring(2, 4) + "/" + f.Saturday(CWE).substring(4);
		System.out.println(cweDate);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(text(), '"+cweDate+"')]//following::a[1]"))).click(); Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		h = new Highlighter();
		h.highlight(driver, "//b[contains(text(), 'Payment/Deduction Details for Claim Week Ending Date')]"); Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{
		/*wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickLogout();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		driver.close();
		driver.quit();*/
	}
}