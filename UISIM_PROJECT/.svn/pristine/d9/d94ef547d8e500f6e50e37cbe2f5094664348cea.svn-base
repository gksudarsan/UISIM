/** @author vsingh  */
package com.Overpayments;
import static org.testng.Assert.assertEquals;

/** @author vsingh  */

import java.sql.SQLException;

/** @author vsingh  */

import java.text.ParseException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.OverPayment_Locators;
import com.ui.locators.Payments_Locators;
import com.ui.locators.Wc_locators;

import com.ui.pages.Add_dependent;
import com.ui.pages.ClaimSummary;
import com.ui.pages.FileWeeklyCertification;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.Overpayment;
import com.ui.pages.ResolveWorkItem;
import com.ui.pages.SearchWorkItem;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.pages.weekly_cert_pension;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.Highlighter;
import com.ui.utilities.PageHeading;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;

public class TC_59512 extends TestBase
{
	static LoginLogoutPage lp;
	static SearchWorkItem sw;
	static screenShot screen=new screenShot();
	static PageHeading ph;
	static  CreateDirectory CD;
	static Wc_locators wcl;
	static Payments_Locators pml;
	static FileWeeklyCertification fwc;
	static Highlighter h;
	static String date1;
	static ClaimSummary cs;
	static UpdateIssueDates uid;
	static weekly_cert_pension  wc;
	static ResolveWorkItem rwi;
	static WeeklyCert w;
	int CWE = -21;
	int numberOfWeeks=1;
	static Overpayment op;
	static OverPayment_Locators opl;
	static String issuesource = "Quality Control";
	static String ClassofOverpayment = "Fraud";
	static String IssueType= "Quality Control";
	static  String EarningAmount= "40";
	static  String WorkingHours = "5";
	FutureDatePastDate f;
	QuerySearch q;

	static String classname, SimpleClassname, snapshotPath, SSN, ed; 
	static TC_59512 ClassObject;


	String query = "SELECT A.SSN FROM T_CLAIMANT A, T_CLAIM B WHERE A.CLAIMANT_ID = B.CLAIMANT_ID  AND B.ENTITLEMENT_TYPE = 'REG'  "
			+ "AND B.STATUS = 'ACTV' AND B.BYE_DATE > CURRENT_DATE AND (B.CLAIM_ID NOT IN (SELECT D.CLAIM_ID FROM T_ISSUE D "
			+ "WHERE B.CLAIM_ID = D.CLAIM_ID) OR B.CLAIM_ID IN (SELECT D.CLAIM_ID FROM T_ISSUE D WHERE B.CLAIM_ID = D.CLAIM_ID "
			+ "AND D.ISSUE_STATUS = 'DECD')) AND A.CLAIMANT_ID NOT IN (SELECT C.CLAIMANT_ID FROM T_WEEKLY_CERTIFICATION C "
			+ "WHERE A.CLAIMANT_ID = C.CLAIMANT_ID AND C.CERTIFICATION_DATE > '";

	public TC_59512()
	{
		super();
	}


	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws InterruptedException, ClassNotFoundException, SQLException

	{
		f = new FutureDatePastDate();
		ed = f.Sunday(CWE);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		System.out.println("Effective date : "+ed);
		query = query + ed + "') AND B.EFFECTIVE_DATE = '" + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);

		ClassObject =new TC_59512();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);

		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));

		driver.get(prop.getProperty("applicationUrl"));
		lp=new LoginLogoutPage();
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		System.out.println("login logout completed");



	}
	@Test(description ="TC_59512_CT 7232 OP Investigate Overpayment "
			+ "Issue - Enter claimant's response and clear op issue" )
	public void TC_59512_op() throws InterruptedException, ParseException, ClassNotFoundException, SQLException
	{
		System.out.println("@test initiated");
		wcl=new Wc_locators();
		fwc=new FileWeeklyCertification();
		opl=new OverPayment_Locators();

		pml=new Payments_Locators();

		cs = new ClaimSummary();

		uid= new UpdateIssueDates();
		op = new Overpayment();
		w = new WeeklyCert();



		//Filling wcBy SSN/CWE ..............................
		wcl.clickHome();
		Thread.sleep(1000);

		w.WeeklyCertBySSN_CWE(driver, snapshotPath, SimpleClassname, SSN, CWE);
		wcl.clickHome();
		// Run Payment bathes---------------------------------------------------------------

		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), "runJob Pay010DetermineWeeklyCertType benefits_daily_515pm;"
				+ "./qclient.sh runJob Pay040ProcessedWeeklyCert benefits_daily_515pm;./qclient.sh runJob Pay050ProvidePayment benefits_daily_515pm");
		Thread.sleep(10000);

		String ID = "";
		for	(int i=0;i<10;i++)
		{
			if (ID.isEmpty())
			{
			q = new QuerySearch();
			System.out.println("i= "+i+" Waiting for Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment to run...");
			Thread.sleep(1000*30);
			try
			{
				ID = q.getClaimantPaymentID("SELECT CLAIMANT_PAYMENT_ID FROM T_CLAIMANT_PAYMENT WHERE "
						+ "CREATED_BY = 'Pay050ProvidePayment' AND DATE(CREATED_TS) = CURRENT_DATE AND CLAIMANT_ID IN (SELECT "
						+ "CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CREATED_TS DESC");
				System.out.println("CLAIMANT_PAYMENT_ID : "+ID);
			}
			catch(Exception e)
			{
				System.out.println("Record not found...");
			}

			

				System.out.println("waiting for payment to be updated");
			}

			else {
				System.out.println("Pay010DetermineWeeklyCertType, Pay040ProcessedWeeklyCert, Pay050ProvidePayment Successful...");
			}
		}
		System.out.println("exit from loop..................");
		Assert.assertFalse(ID.isEmpty(), "Payment ID is null......");

		cs.claimsummary(prop.getProperty("ssn_59512"), snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");
		wcl.clickHome();
		Thread.sleep(1000);

		//Creating ovp issue-------------------------------------------------------------------


		op.createOverpaymentIssue(driver, snapshotPath, SimpleClassname, prop.getProperty("ssn_59512"),issuesource, CWE, 1,numberOfWeeks);
		wcl.clickHome();
		Thread.sleep(1000);
		op.InvestigationOverpaymentIssueQualityControl(driver, snapshotPath, SimpleClassname, prop.getProperty("ssn_59512"), CWE, "Quality Control", ClassofOverpayment);
		wcl.clickHome();
		System.out.println("Predeter.. batch ran successfully......");
		Thread.sleep(1000);

		Overpayment.Invest_Ovp_claimant_clearopissue( driver,  snapshotPath,  SimpleClassname, prop.getProperty("ssn_59512"), issuesource, ClassofOverpayment);
		wcl.clickHome();
		Thread.sleep(1000);
		cs.claimsummary(prop.getProperty("ssn_59512"), snapshotPath, SimpleClassname, "Comment");
		Thread.sleep(1000);

		driver.findElement(By.xpath("//a[text()='Overpayments']")).click();
		Thread.sleep(2000);

		Highlighter h = new Highlighter();
		h.highlight(driver, "//td[ contains (text(), 'Quality Control Pre-determination Letter Generated.')]");


		h.highlight(driver, "//td[ contains (text(), 'Quality Control overpayment issue has been cleared.')]");
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		//

		String expected_issuecleared= "Quality Control overpayment issue has been cleared.";
		String actual_issuecleared= driver.findElement(By.xpath("//td[ contains (text(), 'Quality Control overpayment issue has been cleared.')]")).getText();


		if (actual_issuecleared.equalsIgnoreCase(expected_issuecleared))
		{
			System.out.println("actual and expected values are same");
		}
		else
		{
			System.out.println("actual and expected values are Different");
			h.highlight(driver, "//td[text()='Quality Control overpayment....... FOR FAILING THE TESTCASE')]");	
		}


		Thread.sleep(2000);
		opl.op_inves().click(); 

		opl.SelectOvrPymntIssue(IssueType).click();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		Thread.sleep(500);
		wcl.clickNext().click();

		String actual_result = driver.findElement(By.xpath("//td[ contains (text(), 'Yes')]")).getText();
		String expected= "Yes";

		Assert.assertEquals(actual_result, expected);
		h.highlight(driver, "//td[ contains (text(), 'Yes')]");
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);

		System.out.println(" OP issue cleared ? ......"+actual_result+ ".....Testcase executed and passed");


	}
	@AfterTest
	public void close_browser()
	{
		driver.close();
		driver.quit();
		System.out.println("Testcase executed and browser closed");
	}

}
