package com.Overpayments;

/** @author mjape 

Payment batches pending */

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.ui.base.TestBase;
import com.ui.locators.OverPayment_Locators;
import com.ui.locators.Wc_locators;
import com.ui.pages.ClaimSummary;
import com.ui.pages.LoginLogoutPage;
import com.ui.pages.Overpayment;
import com.ui.pages.Reassign_WorkItem;
import com.ui.pages.UpdateIssueDates;
import com.ui.pages.WeeklyCert;
import com.ui.utilities.CreateDirectory;
import com.ui.utilities.FutureDatePastDate;
import com.ui.utilities.PageHeading;
import com.ui.utilities.QuerySearch;
import com.ui.utilities.SSHConnection;
import com.ui.utilities.screenShot;

public class TC_55815 extends TestBase
{
	FutureDatePastDate f;
	QuerySearch q;
	LoginLogoutPage lp;
	UpdateIssueDates uid;
	WeeklyCert w;
	ClaimSummary c;
	Overpayment o;
	Wc_locators wcl = new Wc_locators();
	screenShot screen = new screenShot();
	String classname, SimpleClassname, snapshotPath, SSN = "", ed;
	TC_55815 ClassObject;
	CreateDirectory CD;
	int CWE = 0;

	String query = "SELECT UNIQUE(A.SSN) FROM T_CLAIMANT A, T_WEEKLY_CERTIFICATION B, T_CLAIMANT_PAYMENT C , T_CLAIM E, "
			+ "T_CLAIM_APPLICATION_EMPLOYER F WHERE A.CLAIMANT_ID = B.CLAIMANT_ID  AND B.CLAIMANT_ID = C.CLAIMANT_ID AND "
			+ "A.CLAIMANT_ID = E.CLAIMANT_ID AND E.CLAIM_APPLICATION_ID = F.CLAIM_APPLICATION_ID AND E.STATUS = 'ACTV' AND "
			+ "E.ENTITLEMENT_TYPE = 'REG' AND E.BYE_DATE > CURRENT_DATE AND F.EMPLOYER_NAME IS NOT NULL AND C.PAYMENT_DATE IS NOT "
			+ "NULL AND B.TOTAL_EARNINGS >10 AND B.CERTIFICATION_DATE > '";

	//Properties prop;
	public TC_55815()
	{
		super();
	}

	//Opening browser... Hitting URL...
	@Parameters({"browser"})
	@BeforeTest
	public void setup(String browser) throws ClassNotFoundException, SQLException, ParseException
	{
		//Searching for the SSN in the database...
		f = new FutureDatePastDate();
		ed = f.d(-29);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		query = query + ed + "' AND B.CERTIFICATION_DATE < '";
		ed = f.Saturday(-7);
		ed = ed.substring(4, 8) + "-" + ed.substring(0, 2) + "-" + ed.substring(2, 4);
		query = query + ed + "'";
		System.out.println("Query being hit to fetch SSN from database :");
		System.out.println(query);
		q = new QuerySearch();	
		SSN = q.queryresult(query);
		System.out.println("SSN to be use : "+SSN);
		
		String lastCWE = q.Data("SELECT CWE FROM T_WEEKLY_CERTIFICATION WHERE CLAIMANT_ID IN (SELECT "
				+ "CLAIMANT_ID FROM T_CLAIMANT WHERE SSN = '"+SSN+"') ORDER BY CWE DESC", "CWE");
		System.out.println("Last CWE : "+lastCWE);
		Date date = new Date();
		String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(date);
		System.out.println("Current Date : "+currentDate);
		Date date1 = new SimpleDateFormat("yyyy-MM-dd").parse(lastCWE);
		Date date2 = new SimpleDateFormat("yyyy-MM-dd").parse(currentDate);
		CWE = (int)((date1.getTime() - date2.getTime()) / (1000*60*60*24));
		System.out.println(CWE);

		ClassObject =new TC_55815();
		CD=new CreateDirectory();
		classname=ClassObject.getClass().getName();
		SimpleClassname =classname.substring(classname.lastIndexOf('.')+1);
		snapshotPath=CD.artifactsPath(SimpleClassname);
		System.out.println("Path of folder where screenshots are placed of Execution: " +snapshotPath);
		initialization(browser);
		wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(prop.getProperty("applicationUrl"));
	}

	@Test(priority=1, description = "Over-reported earning_Create FYI work item")
	public void Testing55815() throws InterruptedException, ClassNotFoundException, SQLException, ParseException
	{
		//Logging in to application...
		lp=new LoginLogoutPage();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		lp.login(prop.getProperty("username"), prop.getProperty("password"));
		Thread.sleep(1000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		
		wcl.clickHome();
		Thread.sleep(3000);
		 ClaimSummary cs=new ClaimSummary();
		cs.claimsummary(SSN, snapshotPath, SimpleClassname, "Processed Weekly Certification(s)");
		Thread.sleep(500);
		
		String EndDate=null;
		
		for(int i=1;i<100;i++)
		   {
			   if(i>0)
			   {
			   
			   String st = driver.findElement(By.xpath("//td[contains(text(),'Processed Weekly Certification(s)')]//following::table[1]/tbody/tr["+i+"]/td[4]")).getText();
			   System.out.println("Element Text is " +st);
			   if (st.equalsIgnoreCase("Payment"))
			   {
				   
				   EndDate = driver.findElement(By.xpath("//td[contains(text(),'Processed Weekly Certification(s)')]//following::table[1]/tbody/tr["+i+"]/td[1]")).getText();
				   System.out.println("Found Paid Week End Date " +EndDate);
				   break;
			   }
			   else
			   {
				   System.out.println("Finding Paid Week...." );
				   
			   }
			   }   
		    }
		Thread.sleep(5000);
		

		//Creating Overpayment Issue...
		wcl.clickHome();
		Thread.sleep(5000);
		o = new Overpayment();
		o.createOverpaymentIssue55815(driver, snapshotPath, SimpleClassname, SSN, "State New Hire Crossmatch", EndDate, 1, 1);

		//Investigating Overpayment Iusse...
		wcl.clickHome();
		Thread.sleep(5000);
		String IssueType="State New Hire Crossmatch";
		String ClassofOverpayment="Non-Fraud";
		String EarningAmount="10";
		String WorkingHours="5";
		OverPayment_Locators opl=new OverPayment_Locators();
		PageHeading ph=new PageHeading();
		String CWE1=Integer.toString(CWE);
		String HireDate=f.Saturday(Integer.parseInt(CWE1));
		System.out.println("Hire Date is " + HireDate);
		wcl.homeTabs("Overpayment").click();
		Thread.sleep(1000);
		wcl.homeTabs("Investigate Overpayment Issue").click();

		wcl.ssn1().sendKeys(SSN);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickNext().click();
		Thread.sleep(2000);
		ph.ListOvrPymnt_Screen();
		opl.SelectOvrPymntIssue(IssueType).click();
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		Thread.sleep(500);
		wcl.clickNext().click();
		ph.OvrPymntSummary_Screen();
		Thread.sleep(1500);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);

		opl.ClickEmplyrResponse().click();
		ph.OvrPymntEmplyrRespose_Screen();
		Thread.sleep(2000);
		wcl.checkMainQuestion("Was the claimant employed by the employer?", "Yes").click();
		Thread.sleep(3000);

		opl.HireDate().sendKeys(HireDate);

		Thread.sleep(1500);
		opl.SelectOption().click();
		Thread.sleep(500);
		wcl.selectReasonForBacdating("Part Time").click();
		Thread.sleep(500);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickSave();
		Thread.sleep(500);
		ph.OvrPymntSummary_Screen();
		Thread.sleep(2000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@name='j_id_6x_1:0:investigateOpIssueCalculatedWeeklyWages:0:investigateOpIssueCalculatedWeeklyWages_-employerActualWages']"))).clear();
		Thread.sleep(1500);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@name='j_id_6x_1:0:investigateOpIssueCalculatedWeeklyWages:0:"
				+ "investigateOpIssueCalculatedWeeklyWages_-employerActualWages']"))).sendKeys(EarningAmount);;

		opl.EnterHourMainScreen().sendKeys(WorkingHours);
		Thread.sleep(1000);
		opl.checkMainQuestion("Clear this issue?", "No").click();
		Thread.sleep(500);
		opl.SelectOption().click();
		Thread.sleep(500);
		wcl.selectReasonForBacdating("Test User").click();
		Thread.sleep(500);

		opl.checkMainQuestion("Class of Overpayment", ClassofOverpayment).click();
		Thread.sleep(500);
		opl.CsrRemark().sendKeys("Testing");
		Thread.sleep(500);
		opl.checkMainQuestion("Generate Pre-determination Letter", "Yes").click();
		Thread.sleep(500);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		Thread.sleep(500);
		opl.Click_SaveAndClose().click();
		ph.OvrPymntConfirmation_Screen();
		
		
		

		//Run Predetermination Notice Batch...
		System.out.println("Waiting for Predetermination Notice batch to run...");
		SSHConnection ssh=new SSHConnection();
		ssh.runSudoCommand(BatchProp.getProperty("Benefits_Batch_Path"), BatchProp.getProperty("OverpaymentPreDeterminationBatch"));
		
		Thread.sleep(10000);

		//Provide Claimant's Responce...
		Thread.sleep(2500);
		wcl.clickHome();
		Reassign_WorkItem.resolveWI(driver, snapshotPath, SimpleClassname, SSN,"FYI WorkItem");
	}

	//Logging out of application...
	@AfterTest
	public void tearDownCT_ST() throws InterruptedException
	{
		wcl.clickHome();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		wcl.clickLogout();
		Thread.sleep(5000);
		driver=screen.getScreenShot(driver, snapshotPath, SimpleClassname);
		driver.close();
		driver.quit();
	}
}